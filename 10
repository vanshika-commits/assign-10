class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix.length == 0) return 0;
        int n = matrix[0].length, res = 0;
        int[] h = new int[n];
        for (char[] row : matrix) {
            for (int j = 0; j < n; j++)
                h[j] = row[j] == '1' ? h[j] + 1 : 0;
            res = Math.max(res, largest(h));
        }
        return res;
    }
    private int largest(int[] h) {
        Stack<Integer> st = new Stack<>();
        int max = 0;
        for (int i = 0; i <= h.length; i++) {
            int curr = (i == h.length) ? 0 : h[i];
            while (!st.isEmpty() && curr < h[st.peek()]) {
                int height = h[st.pop()];
                int width = st.isEmpty() ? i : i - st.peek() - 1;
                max = Math.max(max, height * width);
            }
            st.push(i);
        }
        return max;
    }
}
